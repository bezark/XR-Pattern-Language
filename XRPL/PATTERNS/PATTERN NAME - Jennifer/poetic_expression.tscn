[gd_scene load_steps=12 format=3 uid="uid://b1snysx43fw6k"]

[ext_resource type="PackedScene" uid="uid://wkxwo7cgrljd" path="res://PATTERNS/PATTERN NAME - Zhuojing/example_pattern_ Cubes_are_Cool.tscn" id="1_khsxp"]

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_0wqeg"]
sky_top_color = Color(0.427451, 0.756863, 0.988235, 1)
sky_horizon_color = Color(0.651961, 0.794118, 0.805882, 1)
sky_energy_multiplier = 0.85
ground_bottom_color = Color(0.180392, 0.419608, 0.235294, 1)
ground_horizon_color = Color(0.651961, 0.794118, 0.805882, 1)

[sub_resource type="Sky" id="Sky_d0n5v"]
sky_material = SubResource("ProceduralSkyMaterial_0wqeg")

[sub_resource type="Environment" id="Environment_h2wmr"]
background_mode = 2
sky = SubResource("Sky_d0n5v")
tonemap_mode = 2

[sub_resource type="Shader" id="Shader_e5o6j"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.2.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_always,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform sampler2D texture_refraction : filter_linear_mipmap,repeat_enable;
uniform float refraction : hint_range(-16,16);
uniform vec4 refraction_texture_channel;
uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_linear_mipmap;uniform sampler2D texture_normal : hint_roughness_normal,filter_linear_mipmap,repeat_enable;
uniform float normal_scale : hint_range(-16,16);
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	vec3 normal = MODEL_NORMAL_MATRIX * NORMAL;
	TANGENT = vec3(0.0,0.0,-1.0) * abs(normal.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(normal.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(normal.z);
	TANGENT = inverse(MODEL_NORMAL_MATRIX) * normalize(TANGENT);
	BINORMAL = vec3(0.0,1.0,0.0) * abs(normal.x);
	BINORMAL+= vec3(0.0,0.0,-1.0) * abs(normal.y);
	BINORMAL+= vec3(0.0,1.0,0.0) * abs(normal.z);
	BINORMAL = inverse(MODEL_NORMAL_MATRIX) * normalize(BINORMAL);
	uv1_power_normal=pow(abs(normal),vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0f)).xyz * uv1_scale + uv1_offset + TIME * 0.02;
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
}




vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}


void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(triplanar_texture(texture_metallic,uv1_power_normal,uv1_triplanar_pos),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness,uv1_power_normal,uv1_triplanar_pos),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	NORMAL_MAP = triplanar_texture(texture_normal,uv1_power_normal,uv1_triplanar_pos).rgb;
	NORMAL_MAP_DEPTH = normal_scale;
	vec3 unpacked_normal = NORMAL_MAP;
	unpacked_normal.xy = unpacked_normal.xy * 2.0 - 1.0;
	unpacked_normal.z = sqrt(max(0.0, 1.0 - dot(unpacked_normal.xy, unpacked_normal.xy)));
	vec3 ref_normal = normalize( mix(NORMAL,TANGENT * unpacked_normal.x + BINORMAL * unpacked_normal.y + NORMAL * unpacked_normal.z,NORMAL_MAP_DEPTH) );
	vec2 ref_ofs = SCREEN_UV - ref_normal.xy * dot(triplanar_texture(texture_refraction,uv1_power_normal,uv1_triplanar_pos),refraction_texture_channel) * refraction;
	float ref_amount = 1.0 - albedo.a * albedo_tex.a;
	EMISSION += textureLod(screen_texture,ref_ofs,ROUGHNESS * 8.0).rgb * ref_amount * EXPOSURE;
	ALBEDO *= 1.0 - ref_amount;
	ALPHA = 1.0;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_4gsh8"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_y266g"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_4gsh8")

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_aa8uj"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_4gsh8")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_h4tsw"]
render_priority = 0
shader = SubResource("Shader_e5o6j")
shader_parameter/albedo = Color(0.384314, 0.870588, 1, 0.756863)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.0
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/refraction = 0.05
shader_parameter/refraction_texture_channel = null
shader_parameter/normal_scale = 1.0
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(0.01, 0.01, 0.01)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_refraction = SubResource("NoiseTexture2D_aa8uj")
shader_parameter/texture_normal = SubResource("NoiseTexture2D_y266g")

[sub_resource type="BoxMesh" id="BoxMesh_pyplt"]
material = SubResource("ShaderMaterial_h4tsw")

[sub_resource type="CapsuleMesh" id="CapsuleMesh_6tjs0"]

[node name="Poetic Expression" type="Node3D"]

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.866023, -0.433016, 0.250001, 0, 0.499998, 0.866027, -0.500003, 0.749999, -0.43301, 0, 0, 0)
shadow_enabled = true

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_h2wmr")

[node name="Example Pattern Cubes are Cool" parent="." instance=ExtResource("1_khsxp")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 4.1366, 0)

[node name="Example Pattern Cubes are Cool2" parent="." instance=ExtResource("1_khsxp")]
transform = Transform3D(0.57279, -0.819702, 0, 0.819702, 0.57279, 0, 0, 0, 1, 0.202121, 4.1366, -3.2321)

[node name="Example Pattern Cubes are Cool3" parent="." instance=ExtResource("1_khsxp")]
transform = Transform3D(0.171809, 0, -0.98513, 0, 1, 0, 0.98513, 0, 0.171809, 0.202121, 5.8852, -3.2321)

[node name="Example Pattern Cubes are Cool4" parent="." instance=ExtResource("1_khsxp")]
transform = Transform3D(1, 0, 0, 0, 0.208714, 0.977977, 0, -0.977977, 0.208714, 0.202121, 5.78159, 0.504037)

[node name="Example Pattern Cubes are Cool5" parent="." instance=ExtResource("1_khsxp")]
transform = Transform3D(1, 0, 0, 0, 0.656586, 0.754251, 0, -0.754251, 0.656586, 2.22794, 5.67211, -1.14585)

[node name="Example Pattern Cubes are Cool6" parent="." instance=ExtResource("1_khsxp")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 1.69872, 3.9121, -1.74801)

[node name="XROrigin3D" type="XROrigin3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1.86207)

[node name="XRCamera3D" type="XRCamera3D" parent="XROrigin3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)

[node name="Left" type="XRController3D" parent="XROrigin3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.5, 0.5, -0.5)
tracker = &"left_hand"

[node name="CSGSphere3D" type="CSGSphere3D" parent="XROrigin3D/Left"]
radius = 0.05

[node name="Right" type="XRController3D" parent="XROrigin3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.5, 0.5, -0.5)
tracker = &"right_hand"

[node name="CSGSphere3D2" type="CSGSphere3D" parent="XROrigin3D/Right"]
radius = 0.05

[node name="floor 1" type="CSGBox3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 3.04809, 0.38792, -1.32425)
size = Vector3(10, 1, 8)

[node name="floor 2" type="CSGBox3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -8.27913, 0.38792, -1.32425)
size = Vector3(10, 1, 8)

[node name="floor 3" type="CSGBox3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -8.27913, 0.38792, -10.4603)
size = Vector3(10, 1, 8)

[node name="floor 4" type="CSGBox3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 3.07997, 0.38792, -10.4603)
size = Vector3(10, 1, 8)

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(100, 0, 0, 0, 1, 0, 0, 0, 100, 0, 0, 0)
mesh = SubResource("BoxMesh_pyplt")

[node name="CharacterBody3D" type="CharacterBody3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.140103, 7.03063, 0.842764)

[node name="MeshInstance3D" type="MeshInstance3D" parent="CharacterBody3D"]
mesh = SubResource("CapsuleMesh_6tjs0")

[node name="SubViewport" type="SubViewport" parent="."]
